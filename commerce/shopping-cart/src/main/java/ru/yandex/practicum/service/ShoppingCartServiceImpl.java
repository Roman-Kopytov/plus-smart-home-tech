package ru.yandex.practicum.service;import feign.FeignException;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import ru.yandex.exception.ProductInShoppingCartNotInWarehouse;import ru.yandex.practicum.client.ShoppingStoreClient;import ru.yandex.practicum.client.WarehouseClient;import ru.yandex.practicum.dto.cart.BookedProductsDto;import ru.yandex.practicum.dto.cart.ChangeProductQuantityRequest;import ru.yandex.practicum.dto.cart.ShoppingCartDto;import ru.yandex.practicum.exception.NoProductsInShoppingCartException;import ru.yandex.practicum.exception.NotFoundException;import ru.yandex.practicum.exception.RestictActionCartException;import ru.yandex.practicum.mapper.ShoppingCartMapper;import ru.yandex.practicum.model.Product;import ru.yandex.practicum.model.ShoppingCart;import ru.yandex.practicum.model.ShoppingCartStatus;import ru.yandex.practicum.repository.ShoppingCartRepository;import java.util.*;@RequiredArgsConstructor@Servicepublic class ShoppingCartServiceImpl implements ShoppingCartService {    private final ShoppingCartRepository shoppingCartRepository;    private final WarehouseClient warehouseClient;    private final ShoppingCartMapper shoppingCartMapper;    @Override    public ShoppingCartDto getShoppingCart(String username) {        ShoppingCart cartFromRepositoryByName = getCartFromRepositoryByName(username);        return shoppingCartMapper.toDto(cartFromRepositoryByName);    }    @Override    public ShoppingCartDto addProductsToShoppingCart(String username, Map<UUID, Long> newProducts) {        ShoppingCart cart;        try {            cart = getCartFromRepositoryByName(username);            if (cart.getStatus() == ShoppingCartStatus.DISABLE) {                throw new RestictActionCartException("Карзина дезактивирована, запрещено добавлять товары");            }        } catch (NotFoundException e) {            cart = new ShoppingCart();            cart.setUsername(username);            cart.setStatus(ShoppingCartStatus.ACTIVE);        }        List<Product> products = new ArrayList<>();        for (Map.Entry<UUID, Long> entry : newProducts.entrySet()) {            products.add(Product.builder()                    .productId(entry.getKey())                    .count(entry.getValue())                    .shoppingCart(cart)                    .build());        }        cart.setProducts(products);        ShoppingCart save = shoppingCartRepository.save(cart);        return shoppingCartMapper.toDto(save);    }    private ShoppingCart getCartFromRepositoryByName(String username) {        return shoppingCartRepository.findByUsername(username)                .orElseThrow(() -> new ru.yandex.practicum.exception.NotFoundException("Cart by username: " + username + " not found"));    }    @Transactional    @Override    public void deactivateShoppingCart(String username) {        ShoppingCart savedCart = getCartFromRepositoryByName(username);        savedCart.setStatus(ShoppingCartStatus.DISABLE);    }    @Transactional    @Override    public ShoppingCartDto removeProducts(String username, List<UUID> productsForRemove) {        ShoppingCart cart = getCartFromRepositoryByName(username);        if (cart.getStatus() == ShoppingCartStatus.DISABLE) {            throw new RestictActionCartException("Карзина дезактивирована, запрещено удалять товары");        }        List<Product> products = cart.getProducts();        for (UUID productId : productsForRemove) {            Product product = products.stream()                    .filter(p -> p.getProductId().equals(productId))                    .findFirst()                    .orElseThrow(() -> new NoProductsInShoppingCartException("Товара с ID " + productId + " нет в корзине"));            products.remove(product);        }        ShoppingCart save = shoppingCartRepository.save(cart);        return shoppingCartMapper.toDto(save);    }    @Transactional    @Override    public ShoppingCartDto changeProductQuantity(String username,                                                 ChangeProductQuantityRequest request) {        ShoppingCart cartFromRepository = getCartFromRepositoryByName(username);        Optional<Product> optionalProduct = cartFromRepository.getProducts().stream()                .filter(p -> p.getProductId().equals(request.getProductId()))                .findFirst();        if (optionalProduct.isPresent()) {            Product product = optionalProduct.get();            product.setCount(request.getNewQuantity());        } else {            throw new NotFoundException("Product not found in cart");        }        ShoppingCart save = shoppingCartRepository.save(cartFromRepository);        return shoppingCartMapper.toDto(save);    }    @Transactional    @Override    public BookedProductsDto bookProducts(String username) {        ShoppingCart savedCart = getCartFromRepositoryByName(username);        ShoppingCartDto dto = shoppingCartMapper.toDto(savedCart);        try {            return warehouseClient.bookProductsInWarehouse(dto);        } catch (FeignException e) {            if (e.status() == 400) {                throw new ProductInShoppingCartNotInWarehouse("Ошибка, товар из корзины не находится в требуемом количестве на складе");            } else {                throw e;            }        }    }}